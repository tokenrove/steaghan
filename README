
alpha one notes
---------------
This is steaghan version alpha one. See the notes for alpha zero below,
they still largely apply. Many bugs have been fixed, and lots of useful
features have been added, making steaghan far more usable. Expect a
similarly huge jump to alpha two.

alpha zero notes
----------------

This is steaghan version alpha zero. It is an alpha release, and is
yet ready for public consumption - think of this as a preview.  There
are no checks to determine whether the values one specifies nor the
files one provides are sane, and so improper use can lead to data
loss. (Most notably, in the current version, avoid using
wrapper/wav.so with large files, or with prpg/composite.so, as I have
experienced data loss when using the two together)


``Documentation'': (see also steaghan(1))
wrapper modules ---> allow steaghan to work with various file formats.
                     pgm -> portable graymap format
                     ppm -> portable pixmap format
                     wav -> microsoft wave format (riff)
                     bmp -> microsoft bitmap format
prpg modules ---> the core of steaghan, these modules decide how to spread
                  and mix the bits. [prpg stands for pseudorandom permutation
                                     generator, incidentally]
                  classic -> the ``classical'' shuffle algorithm - fast,
                             but very high in memory consumption 
                  lr -> the luby-rackoff construct, based on des. effective
                        but slow compared to classic. (uses very little 
                        memory, however)
                  composite -> lr construct for composite n, this module
                               is very effective for pixmaps and similar,
                               but can result in data loss for other formats.
file modules ---> 
                  seek -> no reason to use this unless mmap is broken on your
			  system.
                  mmap -> the obvious choice, much faster than seek.
hash modules --->
                  md4 -> considered insecure
                  md5 -> considered less than completely secure
                  ripemd160 -> reasonably secure
cipher modules --->
                  null -> obviously insecure
                  rot13 -> obviously insecure
                  rc5 -> reasonably secure, but only supports ECB right now,
                         and is fairly inconvenient to use. (plus the
			 passphrase to key transform code is nonexistant)

Acknowledgements:

  Jay Kominek, who donated lots of feedback, ideas, and access to fast
	hardware.
  Daniel Barnes, whose initial donation of access to fast hardware was
	essential for this project.
  Tuomas Aura's papers, ``Practical invisibility in digital communication'',
	and its predecessor (which seems to be unavailable on the net now),
	were the original inspiration for this program. (Four years ago,
	now!)
  Michael Luby and Charles Rackoff, for their construction of a PRPG from
	a PRFG.
